Metody oraz interfejsy
Ta lekcja pokrywa metody oraz interfejsy, konstrukty które definiują obiekty oraz ich zachowanie.

Autorzy Go
https://golang.org

* Metody

Go nie posiada klas.
Jednakże, możesz przypisać metody nazwanym typom.

Metoda to funkcja ze specjalnym argumentem _odbiornikiem_ (tzw. _receiver_)

Odbiornik pojawia się w swej własnej liście argumentów pomiędzy słowem `func` 
a nazwą metody.

W tym przykładzie, metoda `Abs` posiada odbiornik typu `Vertex` nazwanym `v`.

.play methods/methods.go

* Metody to funkcje

Zapamiętaj: metoda to po prostu funkcja z odbiornikiem.

Oto `Abs` zapisana jako regularna funkcja bez zmian w jej funkcjonalności.

.play methods/methods-funcs.go

* Metody ciąg dalszy

Możesz równierz zadeklarować metodę na nie-konstruktowych typach.

W tym przykładzie, widzimy numeryczną wartość `MyFloat` wraz z metodą `Abs`.

Metodę, możesz tylko zadeklarować z odbiornikiem którego typ zdefiniowany jest w tym
samym pakiecie co metoda.
Nie możesz zadeklarować metody z odbiornikiem którego typ zadeklarowany jest w innym pakiecie
(to równierz dotyczy wbudowanych typów, takich jak `int`).

.play methods/methods-continued.go

* Odbiorniki wskaźnikowe

Możesz zadeklarować metody z odbiornikami wskaźnikowymi (tzw. pointer receivers).

To oznacza, że typ odbiornika ma składnię literału `*T` dla jakiegoś typu `T`.
(Równierz, `T` nie może być wskaźnikiem takim jak na przykład `*int`.)

Na przykład, metoda `Scale` zdefiniowana jest na `*Vertex`.

Metody z odbiornikami wskaźnikowymi mogą zmieniać wartości które wskazuje odbiornik
(tak jak `Scale` robi to w tym przykładzie).
Ponieważ metody często muszą zmieniać odbiornik, odbiorniki wskaźnikowe są dużo 
częsciej używane niżeli odbiorniki wartości.

Spróbuj usunąć `*` z deklaracji funkcji `Scale` na lini 16 i zobacz jak zmieni się
zachowanie programu.

Z odbiornikiem wartości, metoda `Scale` operuje na podstawie kopii oryginalnej
wartości `Vertex`.
(Jest to takie samo zachowanie jak zachowanie funkcji co do każdego innego argumentu.)
Metoda `Scale` musi posiadać odbiornik wskaźnikowy by zmienić wartość `Vertex` zadeklarowaną 
w funkcji `main`.

.play methods/methods-pointers.go

* Wskaźniki i funkcje

Tu widzimy metody `Abs` oraz `Scale` zapisane jako funkcje.

Jeszcze raz spróbuj usunąć `*` z lini 16.
Potrafisz dostrzec dlaczego zachowanie się zmieniło?
Co jeszcze musiałeś zmienić by przykład się skompilowal?

(Jeśli nie jesteś pewien, kontynuuj do następnej strony.)

.play methods/methods-pointers-explained.go

* Metody oraz wskaźnik pośredni

Porównując dwa poprzednie programy, mogłeś zauważyć że 
funkcje z argumentem wskaźnikowym muszą przyjmować wskaźnik:

	var v Vertex
	ScaleFunc(v, 5)  // Compile error!
	ScaleFunc(&v, 5) // OK

podczas gdy metody z odbiornikami wskaźnikowymi przyjmują wartość lub wskaźnik jako
odbiornik gdy są wywołane:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

Dla wyrażenia `v.Scale(5)`, nawet jeśli `v` jest wartością a nie wskaźnikiem,
metoda z wskaźnikiem odbiornika jest wywołana automatycznie.
To znaczy, dla wygody, Go iterpretuje wyrażenie `v.Scale(5)` jako
`(&v).Scale(5)` ponieważ metoda `Scale` posiada wskaźnik odbiornika.

.play methods/indirection.go

* Metody oraz wskaźnik pośredni (2)

To samo dzieje się w drugim kierunku.

Funkcje które przyjmują argument wartości muszą przyjąć wartość danego typu:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

podczas gdy metody z odbiornikami wartości przyjmują wartość lub wskaźnik jako 
odbiornik gdy są wywołane:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

W tym przypadku, wywołanie metody `p.Abs()` jest interpretowane jako `(*p).Abs()`.

.play methods/indirection-values.go

* Wybranie wartości jako wskaźnik odbiornika. 

Istnieją dwa powody dla których warto używać wskaźnik odbiornika.

Pierwszy to taki że metoda może zmodyfikować wartość którą wskazuje odbiornik.

Drugim powodem jest unikanie kopiowania wartości przy każdym wywołaniu metody.
Jest to szczególnie wydajne gdy na przykład odbiornik jest dużą strukturą.

W tym przykładzie, `Scale` oraz `Abs` posiadają tryb odbiornika, `*Vertex`,
nawet pomimo tego że metoda `Abs` nie modyfikuje swego odbiornika.

Generalnie, wszystkie metody danego typu powinny mieć odbiornik wartości lub 
wskaźnik odbiornika, lecz nie mieszanine obu.
(Zobaczymy dlaczego na następnych stronach)

.play methods/methods-with-pointer-receivers.go

* Interfejsy (tzw. interfaces)

Typ interfejsu jest definiowany jako zestaw sygnatur metody.

Wartość typu interfejsu może przetrzymywać jakąkolwiek wartość która implementuje te metody.

*Uwaga:* W przykładowym kodzie jest błąd na lini 22.
`Vertex` (wartość typu) nie implementuje `Abser` ponieważ
metoda `Abs` jest zdefiniowana tylko na `*Vertex` (typ wskaźnika).

.play methods/interfaces.go

* Interfejsy są implementowane niejawnie

Typ implementuje interfejs implementujac jego metody.
Nie ma tutaj wyraźnej deklaracji intencji, takiej jak na przykład "implements".

Niejawne interfejsy rozdzielają definicje interfejsu od jego implementacji,
co sprawia, że poźniej mogą pojawić się w danym pakiecie bez wcześniejszego uzgodnienia.

.play methods/interfaces-are-satisfied-implicitly.go

* Wartości interfejsów

O wartościach interfejsów można by pomyśleć jak o parze uporządkowanych zbiorów (tzw. tuple) które 
składają się z wartości i konkretnego typu:

	(wartość, typ)

Wartość interfejsu przetrzymuje wartość określonego rodzaju typu.

Wezwanie metody na wartości interfejsu, egzekwuje metode o tej samej nazwie na jej
określonym typie.

.play methods/interface-values.go

* Wartości interfejsu z brakiem wartości (nil)

Jeśli konkretna wartość w interfejsie posiada brak wartości,
metoda zostanie wywołana z odbiornikiem bez wartości. 

W niektórych językach to wywołałoby `null pointer exception`,
lecz w Go, często pisze się metody, które skutecznie radzą sobie 
gdy są wywołane z odbiornikiem bez wartości (tak jak można zobaczyć w przykładzie obok, metodzie `M`).

Zauważ, że interfejs który przetrzymuje wartość zawierającą nil, sam w sobie nie jest bez wartości.

.play methods/interface-values-with-nil.go

* Nilowe wartości intefejsów

Wartość nilowa interfejsu nie przetrzymuje ani wartości ani żadnego konkretnego typu.

Wezwanie metody na nilowym interfejsie powoduje błąd, ponieważ wewnątrz
interfejsu nie ma typu który wskazałby którą dokładnie metode wywołać.

.play methods/nil-interface-values.go

* Pusty intefejs

Interfejs który nie określa żadnej metody, nazwany jest pustym interfejsem:

	interface{}

Pusty interfejs może przetrzymywać wartości każdego typu.
(Każd typ implementuje co najmniej zero metod)

Puste interfejsy używane są przez kod który obsługuje wartości nieznanych typów.
Na przykład, `fmt.Print` przyjmuje jakakolwiek liczbę argumentów typu `interface{}`.

.play methods/empty-interface.go

* Asercje typów

Asercja typu dostarcza dostęp do konkretnej wartości danej wartości interfejsu.

	t := i.(T)

Instrukcja powyżej zakłada że wartość interfejsu `i` przetrzymuje konkretny typ `T`
oraz przypisuje zasadniczą wartość `T` zmiennej `t`.

Jeśli `i` nie posiada `T`, instrukcja spowoduje panikę(tzw. panic).

By przetestować czy interfejs posiada wartość specyficznego typu,
asercja typu może zwrócić dwie wartości: wartość zasadniczą oraz
wartość boolean która określa czy dana asercja osiągnęła sukces.

	t, ok := i.(T)

Jeśli `i` posiada `T`, wtedy `t` będzie wartością zasadniczą a `ok` będzie prawdą (true).

Jeśli jednak nie, `ok` będzie fałszem (false) a `t` będzie wartością zerową typu `T`,
i nie będzie paniki.

Zauważ podobieństwo między składnią powyżej jak tą która używana jest by czytać mapy.

.play methods/type-assertions.go

* Typ warunku wielokrotnego wyboru (tzw. switch)

Switch jest konstruktem który pozwala na wiele asercji typów w serii.

Typ switch jest jak regularna instrukcja switch, jednak cases w typie switch
specyfikują typy, nie wartości, wartości tych typów porównywane są z typami
wartości przetrzymywanymi w danych wartościach interfejsu.

	switch v := i.(type) {
	case T:
		// v ma typ T
	case S:
		// v ma typ S
	default:
		// brak zgody; v ma ten sam typ co i
	}

Deklaracja w typie switch ma tą samą składnię co typ asercji `i.(T)`,
jednak specyficzny typ `T` jest zamieniony ze słowem kluczem `type`.

Ta instrukcja switch sprawdza czy wartość interfesju `i`
przetrzymuje wartość typu `T` lub `S`.
W każdym `T` oraz `S`, zmienna `v` będzie typu 
`T` lub `S` i przetrzyma wartość posiadaną przez `i`.
W default case, zmienna `v` jest tego samego typu oraz wartości co
wartość `i`.

.play methods/type-switches.go

* Stringers

Jednym z najbardziej wszechobecnym interfejsów jest [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] zdefiniowany przez pakiet [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

`Stringer` jest typem który może przedstawić się jako string. Pakiet `fmt`
(i wiele innych) potrzebuje tego pakietu by wydrukować wartości.

.play methods/stringer.go

* Ćwiczenie: Stringers

Spraw by typ `IPAddr` implementował `fmt.Stringer` by wydrukować 4 ciągi liczb z kropkami.

Na przykład, `IPAddr{1,`2,`3,`4}` powinien się wydrukować jako `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Błędy (tzw. errors)

Programy Go wyrażają błedy poprzez wartości `error`.

Typ `error` jest wbudowanym interfejsem podobnym do `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Tak samo jak w przypadku `fmt.Stringer`, pakiet `fmt` szuka interfejsu `error` gdy drukuje wartości.)

Funkcje często zwracają wartość `error`, a blok kodu który wywołuje funkcję powinien 
dostarczać logikę która testuje czy `error` równa się `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

`error` o wartości nil oznacza sukces; `error` o wartości innej niż nil oznacza porażkę.

.play methods/errors.go

* Ćwiecznie: Errors

Skopiuj swoją funkcję `Sqrt` z [[/flowcontrol/8][wcześniejszego ćwiczenia]] i zmodyfikuj ją tak by zwracała równierz wartość `error`.

`Sqrt` powinna zwrócić wartość `error` inną niż nil, jeśli numer zwrócony będzie numerem ujemnym. 

Stwórz nowy typ

	type ErrNegativeSqrt float64

i spraw by był typem `error` po przez

	func (e ErrNegativeSqrt) Error() string

metodę, tak więc `ErrNegativeSqrt(-2).Error()` zwróci `"cannot`Sqrt`negative`number:`-2"`.

*Uwaga:* Wywołanie `fmt.Sprint(e)` wewnątrz metody `Error` spowoduje że program wejdzie w nieskończoną pętle. Możesz tego uniknąć po przez konwersję `e`: `fmt.Sprint(float64(e))`. Dlaczego?

Zmień swoją funkcję `Sqrt` tak by zwróciła wartość `ErrNegativeSqrt` gdy otrzyma liczbę ujemną. 

.play methods/exercise-errors.go

* Czytniki (tzw. readers)

Pakiet `io` specyfikuje interfejs `io.Reader`,
który pozwala na wczytanie wycinka danych.

Standardowa biblioteka Go zawiera [[https://golang.org/search?q=Read#Global][wiele implementacji]] tego właśnie interfejsu, pliki, połączenia sieciowe, kompresory, i inne.

`io.Reader` interfejs zawiera metodę `Read`:
	func (T) Read(b []byte) (n int, err error)

`Read` populuje wycinek bitów danymi oraz zwraca ten właśnie wycinek bitów oraz error. 
Zwraca error `io.EOF` gdy ciąg danych się kończy.  

Kod podany w przykładzie tworzy
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
oraz konsumuje jego wynik, 8 bitów po kolei.

.play methods/reader.go

* Ćwiczenie: Readers

Zaimplementuj typ `Reader` który emituje nieskończony łancuch charakterów ASCII
`'A'`.

.play methods/exercise-reader.go

* Ćwiczenie: rot13Reader

Ogólnie przyjętym wzorem jest [[https://golang.org/pkg/io/#Reader][io.Reader]] w którym znajduje się kolejny `io.Reader`, modyfikujący w jakiś sposob łancuch danych.

Na przykład, funkcja [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] przyjmuje `io.Reader` (łancuch skompresowanych danych) oraz zwraca `*gzip.Reader` który równierz implementuje `io.Reader` (lańcuch zdekompresowanych danych).

Zaimplementuj `rot13Reader` który implementuje `io.Reader` oraz czyta z `io.Reader`, modyfikując łancuch po przez zaaplikowanie [[https://en.wikipedia.org/wiki/ROT13][rot13]] szyfru podstawieniowego do wszystkich charakterów alfabetycznych.

Typ `rot13Reader` jest już dla ciebie dostarczony.
Spraw by był on `io.Reader` po przez implementacje jego metody `Read`. 

.play methods/exercise-rot-reader.go

* Obrazy (Images)

[[https://golang.org/pkg/image/#Image][Pakiet image]] definiuje interfejs `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Uwaga*: `Rectangle` który zwraca wartość metody `Bounds` jest tak naprawde
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], ponieważ 
jego deklaracja jest w środku pakietu `image`.

(Zobacz [[https://golang.org/pkg/image/#Image][tę dokumentację]] by dowiedzieć się więcej.)

Typy `color.Color` oraz `color.Model` równierz są interfejsami, jednak zignorujemy ten fakt poprzez użycie predefiniowanych implementacji `color.RGBA` oraz `color.RGBAModel`. Te interfejsy oraz typy są specyfikowane przez [[https://golang.org/pkg/image/color/][pakiet image/color]].

.play methods/images.go

* Ćwiczenie: Images

Pamiętasz [[/moretypes/18][generator obrazów]] który napisałeś wcześniej? Spróbujmy napisać kolejny, tym razem zwróci on implementację `image.Image` zamiast wycinka danych.

Zdefiniuj swój własny typ `Image`, zaimplementuj [[https://golang.org/pkg/image/#Image][wymagane metody]], oraz wywołaj `pic.ShowImage`.

`Bounds` powinny zwrócić `image.Rectangle`, jak na przykład `image.Rect(0,`0,`w,`h)`.

`ColorModel` powinien zwrócić `color.RGBAModel`.

`At` powinno zwrócić kolor; wartości `v` w poprzednim generatorze obrazów, w tym odpowiada `color.RGBA{v,`v,`255,`255}`.

.play methods/exercise-images.go

* Gratulujemy!

Ukończyłeś tą lekcję!

Możesz wrócić do listy [[/list][modułów]] by dowiedzieć się czego nauczyć się następnie, lub kontynuować do [[javascript:click('.next-page')][następnej lekcji]].
