Współbieżność (tzw. concurrency)

Go dostarcza możliwość współbierzności jako podstawową część języka. Ta lekcja ją zaprezentuje oraz przedstawi przykłady które mogą zostać użyte.

Autorzy Go
https://golang.org

* Gorutyny (tzw. goroutines)

_gorutyna_ jest lekkim wątkiem którym zarządza stos wywołań Go.

	go f(x, y, z)

rozpoczyna nową gorutynę:

	f(x, y, z)

Ewaluacja `f`, `x`, `y` oraz `z` ma miejsce w współbierznej gorutynie, a egzekucja `f`, w nowej gorutynie.

Gorutyny działają w tej samej przesteni adresowej, tak więc dostęp do dzielonej pamięci musi być zsynchronizowany. Pakiet [[https://golang.org/pkg/sync/][`sync`]] dostarcza przydatnych prymitywów, jednak nie będziesz ich tak często potrzebował w Go jako że istnieją inne prymitywy. (Zobacz następny slide).

.play concurrency/goroutines.go

* Kanały (tzw. channels)

Kanały są typami łączników przez które możesz wysyłać i dostawać wartości z użyciem operatora, `<-`.

	ch <- v    // Wysyła v do kanału ch.
	v := <-ch  // Otrzymuje od ch,
	           // oraz przypisuje wartość do v.

(Przepływ danych odbywa się w kierunku w którym wskazuje strzałka.)

Tak jak mapy oraz wycinki, kanały muszą zostać stworzone przed użyciem:

	ch := make(chan int)

Domyślnie, wysyłający oraz otrzymujący są zablokowane dopóki druga strona nie jest gotowa. To pozwala gorutynom na synchronizację bez jawnej blokady lub zmiennej warunkowej.

Kod przykładowy sumuje numery w wycinku, rozdzielając pracę pomiędzy dwie gorutyny.
Tylko gdy obydwie gorutyny ukończą swe kalkulacje, wynik jest obliczany.

.play concurrency/channels.go

* Kanały buforowane (tzw. buffered channels)

Kanały mogą być _buforowane_. Dostarcz wielkość bufora jako drugi argument `make` by zaincjalizować kanał buforowany:

	ch := make(chan int, 100)

Wysyła blok do kanału buforowanego tylko gdy bufor jest pełny. Otrzymuje blok gdy bufor jest pusty.

Zmodyfikuj przykład by przepełnić bufor i zobacz co się stanie.

.play concurrency/buffered-channels.go

* Range oraz Close

Wysyłający może zamknąć (`close`) kanał by podkreślić ze nie zostanie wysłana już żadna wartość. Otrzymujący może sprawdzić czy kanał został zamknięty poprzez przypisanie drugiego parametru do swego wyrażenia:

	v, ok := <-ch

`ok` jest `false` jeśli nie ma więcej wartości do otrzymania oraz gdy kanał został zamknięty.

Pętla `for`i`:=`range`c` otrzymuje wartości z kanału dopóki nie zostanie on zamknięty.

*Uwaga:* Tylko wysyłający powinien zamykać kanał, nigdy otrzymujący. Wysałając do zamkniętego kanału można wywołać panikę.

*Kolejna*uwaga:* Kanały nie są jak pliki; tak naprawdę nie musisz ich zamykać. Zamykanie kanałów jest niezbędne tylko wtedy, gdy odbiorca musi wiedzieć że nie dostanie już żadnych więcej wartości, na przykład po to by mógł zakończyć pętlę `range`.

.play concurrency/range-and-close.go

* Select

Instrukcja `select` pozwala gorutynom czekać na rózne operacje.

`select` blokuje wykonanie gorutyny dopóki jedna z jego przypadków (case) nie uruchamia się, wtedy uruchamia ten właśnie przypadek. Wybiera przypadek losowo jeżeli więcej niż jeden przypadek spełnia warunki.  

.play concurrency/select.go

* Domyślna selekcja

Przypadek `default` w `select` jest uruchamiany w momencie gdy żaden innych przypadek nie jest gotowy/nie spełnia warunków.

Użyj przypadku `default` by spróbować wysłać lub otrzymać bez blokowania: 

	select {
	case i := <-c:
		// użyj i
	default:
		// otrzymywanie od c zablokowałoby kanał
	}

.play concurrency/default-selection.go

* Ćwiczenie: Równowartościowe drzewa binarne

Może istnieć wiele różnych równowartościowych drzew binarnych o tej samej sekwencji wartości które przetrzymują. Na przykład, tutaj są dwa drzewa binarne przetrzymujące sekwencję 1, 1, 2, 3, 5, 8, 13. 

.image /content/img/tree.png

Funkcja która sprawdza czy oba drzewa binarne przetrzymują tę samą sekwencję jest bardzo skomplikowana w wielu językach. My użyjemy współbierzności Go oraz kanałów by napisać łatwe rozwiązanie.
Ten przykład używa pakietu `tree`, które definiuje typ:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}



Kontynuuj opis na [[javascript:click('.next-page')][następnej stronie]].

* Ćwiczenie: Równowartościowe drzewa binarne

*1.* Zaimplementuj funkcję `Walk`.

*2.* Przetestuj funkcję `Walk`.

Funkcja `tree.New(k)` konstruuje drzewo binarne o strukturze losowej (zawsze posortowanej) przetrzymujące wartości `k`, `2k`, `3k`, ..., `10k`.

Stwórz nowy kanał `ch` oraz rozpocznij działanie funkcji `Walk`.

	go Walk(tree.New(1), ch)

Następnie przeczytaj oraz wydrukuj 10 wartości z kanału. Powinny być to numery 1, 2, 3, ..., 10.

*3.* Zaimplementuj funkcję `Same` używając `Walk` by zdereminować czy `t1` oraz `t2` posiadają te same wartości.

*4.* Przetestuj funkcję `Same`.

`Same(tree.New(1),`tree.New(1))` powinno zwrócić true, a `Same(tree.New(1),`tree.New(2))` powinno zwrócić false.

Dokumentacja `Tree` jest dostępna [[https://godoc.org/golang.org/x/tour/tree#Tree][tutaj]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Widzieliśmy jak wspaniałe do komunikowania pomiędzy gorutynami są kanały.

Ale co jeśli nie potrzebujemy komunikacji? Co jeśli po prostu chcemy się upewnić że
tylko jedna gorutyna może mieć dostęp do zmiennej w tym samym czasie by uniknąć konfliktów?

Ten koncept nazwany jest _wzajemnym_wykluczeniem_ (tzw. mutual exclusion), struktura danych która nam to daje, nazwana jest _mutex_.
Standardowa biblioteka Go dostarcza wzajemne wykluczenie za pomocą pakietu
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] oraz jego dwóch metod:

- `Lock`
- `Unlock`

Możemy zdefiniować blok kodu który ma być uruchamiany z wzajemnym wykluczniem poprzez otoczenie go 
wywołaniem do `Lock` oraz `Unlock` - tak jak widać to w metodzie `Inc`.

Możemy równierz użyć `defer` by upewnić się że mutex będzie otwarty (unlocked) tak samo jak widać to w metodzie `Value`.

.play concurrency/mutex-counter.go

* Ćwiczenie: Web Crawler

W tym ćwiczeniu użyjemy współbierzności Go by równolegle puścić web crawlera.

Zmodyfikuj funkcję `Crawl` by odzyskała URLe równolegle bez odzyskiwania tego samego URLa dwa razy.

 
_Podpowiedź_: możesz zachować odzyskane URLe w pamięci podręcznej za pomocą mapy, jedak mapy same w sobie nie są bezpieczne
do użytku w współbierzności.

.play concurrency/exercise-web-crawler.go

* Gdzie udać się dalej...

#appengine: Możesz zacząć poprzez
#appengine: [[https://golang.org/dl/][zainstalowanie Go]].

#appengine: Gdy już zainstalujesz Go,
[[https://golang.org/doc/][Dokumentacja Go]] jest świetnym miejscem by
#appengine: kontynuować.
start.
Zawiera referencje, tutoriale, filmy video, oraz więcej.

By dowiedzieć się jak zoorganizować oraz pracować z kodem Go, zobacz [[https://www.youtube.com/watch?v=XCsL89YtqCs][to nagranie]] lub przeczytaj [[https://golang.org/doc/code.html][How to Write Go Code]].

Jeśli potrzebujesz pomocy z biblioteką standardową, zobacz [[https://golang.org/pkg/][package reference]]. Jeśli potrzebujesz pomocy z samym językiem, może cię to zdziwić, ale [[https://golang.org/ref/spec][Language Spec]] jest bardzo przyjemny do poczytania.

By dalej zwiedzać model wielobierzności w Go, zobacz
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://talks.golang.org/2012/concurrency.slide][slidy]])
oraz
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://talks.golang.org/2013/advconc.slide][slidy]])
oraz przeczytaj
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]].

By rozpocząć pisanie aplikacji webowych, zobacz
[[https://vimeo.com/53221558][A simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][slidy]])
oraz przeczytaj
[[https://golang.org/doc/articles/wiki/][Writing Web Applications]] tutorial.

The [[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]] daje interesującą perspektywę dotyczącą funkcji Go.

The [[https://blog.golang.org/][Go Blog]] posiada duże archiwum bardzo informacyjnych artykułów dotyczących Go.

Odwiedź [[https://golang.org][golang.org]] po więcej.

