Pakiety, zmienne, oraz funkcje.
Naucz się podstawowych komponentów każdego programu Go.

Autorzy Go
https://golang.org

* Pakiety (tzw. Packages)

Każdy program Go jest stworzony z pakietów.

Programy zaczynają się w pakiecie `main`.

Ten program używa pakietów z zaimportowanymi ścieżkami `"fmt"` oraz `"math/rand"`.

Umownie, deklaracja pakietu jest taka sama jak ostatni element z ścieżki importu. Na przykład, package `"math/rand"` zawiera pliki które zaczynają się od instrukcji `package`rand`.

#appengine: *Uwaga:* Środowisko w którym te programy są uruchamiane jest
#appengine: deterministyczne, tak więc za każdym razem gdy puścisz program
#appengine: `rand.Intn` zwróci tę samą wartość.
#appengine:
#appengine: (By zobaczyć inną liczbę, podłącz generator liczb; zobacz [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: W playgroundzie czas jest stałą, więc będziesz musiał użyć czegoś innego do generatora.)

.play basics/packages.go

* Importy (tzw. Imports)

Ten kod grupuje importy w ścieżki importu które znajdują się w nawiasie. 

Możesz równierz napisać wiele ścieżek importu osobno, na przykład:

	import "fmt"
	import "math"

Jednak dobrze jest używać importów uwzględnionych w nawiasie.

.play basics/imports.go

* Nazwy eksportowane (tzw. Exported names)

W Go, nazwa jest eksportowana gdy zaczyna się dużą literą. 
Na przykład, `Pizza` jest nazwą exportowaną, tak samo jak `Pi`, które eksportowane
jest z pakietu `math`.

`pizza` oraz `pi` nie zaczynają się dużą literą, więc nie są eksportowane.

Gdy importujesz pakiety, możesz odnieść się tylko do ich nazw eksportowanych.
Jakiekolwiek nazwy które nie są eksportowane, są nie dostępne poza pakietem.

Uruchom kod. Zauważ jaki błąd zwrócił.

By naprawić ten błąd, zmień nazwę `math.pi` na `math.Pi` i spróbuj ponownie.

.play basics/exported-names.go

* Funkcje (tzw. Functions)

Funkcja może przyjąć zero lub więcej argumentów.

W tym przykładzie, `add` przyjmuje dwa parametry o typie `int`.

Zauważ że typ podany jest _po_ nazwie zmiennej.

(By dowiedzieć się więcej dlaczego typy wyglądają tak a nie inaczej, zobacz [[https://blog.golang.org/gos-declaration-syntax][artykuł dotyczący składni deklaracji Go]].)

.play basics/functions.go

* Funkcje ciąg dalszy

Gdy dwie lub więcej kolejnych parametrów funkcji są tego samego typu, możesz pominąć podanie typu na wszystkich parametrach, prócz ostatniego.

W tym przykładzie, skrócilismy:

	x int, y int

na

	x, y int

.play basics/functions-continued.go

* Zwracanie wielu wyników

Funkcja może zwrócić jakąkolwiek liczbe rezultatów.

Funkcja `swap` zwraca dwa strings.

.play basics/multiple-results.go

* Nazwane wartości zwrotne

W Go wartości zwrócone mogą być nazwane. Jeśli są, są one traktowane jako zmienne zdefiniowane na samej górze funkcji. 

Nazwy tych zwrotnych powinny być użyte tak, by udokumentować znaczenie wartości zwrotnych.

Instrukcja `return` bez żadnych argumentów zwraca wartości nazwane. Są one zwane "nagimi" zwrotami (tzw. "naked" return)

Instrukcje naked return powinny być używane tylko w krótkich funkcjach, tak jak w przykładzie podanym ponieważ mogą bardzo utrudnić czytelność w długich funkcjach.

.play basics/named-results.go

* Zmienne (tzw. variables)

Instrukcja `var` deklaruje listę zmiennych; tak jak w liście argumentów funkcji, typ jest ostatni.

Instrukcja `var` może znajdować się na poziomie pakietu lub funkcji. W przykładzie obok widzimy obie sytuacje.

.play basics/variables.go

* Zmienne z inicjatorami

Deklaracja zmiennej może zawierać inicjator, jeden na każdą zmienną.

Jeśli inicjator jest obecny, podanie typu jest zbędne; zmienna przyjmnie typ inicjatora.

.play basics/variables-with-initializers.go

* Deklarowanie krótkich zmiennych (tzw. short variables)

W środku funkcji, `:=` może zostać użyte zamiast deklaracji `var` z domniemanym typem.

Poza funkcją, każda instrukcja rozpoczyna się od słowa klucza (`var`, `func`, i tak dalej), tak więc konstrukt `:=` jest nie dostępny.

.play basics/short-variable-declarations.go

* Podstawowe typy

Podstawowe typy Go to:

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias dla uint8

	rune // alias dla int32

	float32 float64

	complex64 complex128

Przykład prezentuje zmienne różnych typów,
oraz pakowanie zmiennych w bloki, tak samo jak 
z instrukcjami importu.


Typy `int`, `uint`, oraz `uintptr` są zazwyczaj 32 bitowe na 32-bitowych systemach i 64 bitowe na systemach 64-bitowych.
Gdy potrzebna ci wartość liczbowa, powinies użyć `int` chyba że z jakiegoś specyficznego powodu musisz użyć liczby całowitej lub liczby całkowitej bez znaku.

.play basics/basic-types.go

* Wartości zerowe

Zmienne zadeklarowane bez jawnej wartości początkowej posiadają 
_wartość_zerową_.

Wartość zerowa wynosi:

- `0` dla typów numerycznych,
- `false` dla wartości boolean, oraz
- `""` (pusty string) dla strings.

.play basics/zero.go

* Konwersja typów

Wyrażenie `T(v)` konwertuje wartość `v` na typ `T`.

Przykładowe konwersje numeryczne:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Lub, prościej:

	i := 42
	f := float64(i)
	u := uint(f)

W przeciwieństwie do C, przydział pomiędzy poszczególnymi typami wymaga
jawnej konwersji.
Spróbuj usunąć konwerjse `float64` lub `uint` w przykładzie obok i zobacz co się stanie.

.play basics/type-conversions.go

* Wnioskowanie typów (tzw. Type inference)

Gdy deklarujemy zmienną bez określenia danego typu (poprzez użycie składni deklaracji `:=` lub `var`=`), typ zmiennej zostanie wywnioskowany po przez wartość po prawej stronie.

Gdy typ wartości po prawej stronie jest określony, nowo powstała zmienna będzie właśnie tego typu:

	var i int
	j := i // j jest int

Gdy jednak wartość po prawej stronie zawiera stałą numeryczną bez podanego typu, nowa zmienna może być `int`, `float64`, lub `complex128`, w zależności od dokladności stałej:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Spróbuj zmiennic wartość początkową `v` w przykładzie obok i zobacz jak wpływa to na typ zmiennej.

.play basics/type-inference.go

* Stałe (tzw. constants)

Stałe są deklarowane podobnie jak zmienne, jednak z `const` słowo kluczem.

Stałe mogą być znakami, stringami, wartościami boolean, lub wartościami liczbowymi.

Stałe nie mogą być zadeklarowane przy pomocy składni `:=`.

.play basics/constants.go

* Stałe liczbowe (tzw. numeric constants)

Stałe liczbowe to wartości o dużej precyzji.

Stała zaincjalizowana bez podania typu posiada typ wymagany przez kontekst.

Spróbuj wydrukować `needInt(Big)`.

(`int` może maksymalnie przetrzymać 64-bitową liczbę, oraz czasem mniejszą.)

.play basics/numeric-constants.go

* Gratulujemy!

Ukończyłeś tą lekcję!

Możesz wrócić do listy [[/list][modułów]] by dowiedzieć się czego nauczyć się następnie, lub kontynuować do [[javascript:click('.next-page')][następnej lekcji]].
