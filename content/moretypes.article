Więcej typów: struktury (structs), wycinki (slices), oraz mapy (maps).
Naucz się jak zdefniować typy: ta lekcja pokrywa struktury (structs), tablice (arrays), wycinki (slices) oraz mapy (maps).

Autorzy Go
https://golang.org

* Wskaźniki (tzw. pointers)

Go posiada wskaźniki.
Wskaźnik przetrzymuje adres w pamięci danej wartości.

Typ `*T` to wksaźnik do wartości `T`. Jego wartość zerowa wynosi `nil`.

	var p *int

`&` operator generuje wskaźnik do jego operanda.

	i := 42
	p = &i

Operator `*` określa wartość bazowa wskaźnika.

	fmt.Println(*p) // przyczytaj i poprzez wskaźnik p
	*p = 21         // ustaw i poprzez wskaźnik p

Znane jest to jako "dereferencja"(tzw. dereferencing) lub "pośrednictwo"(tzw. indirecting).

W przeciwieństwie do C, Go nie ma wskaźnika arytmetycznego.

.play moretypes/pointers.go

* Struktury (tzw. structs)

`struct` jest kolekcją pól. 

.play moretypes/structs.go

* Pola Struktur (Struct Fields)

Aby uzyskać dostęp do pola stuktury używamy kropki.

.play moretypes/struct-fields.go

* Wskaźniki do struktur (Pointers to structs)

Pola struktury mogą być rownierz osiągnięte poprzez użycie wskaźnika struktury.

By uzyskać dostęp do pola `X` w danej strukturze gdy mamy wskaźnik struktury `p`, możemy 
napisać `(*p).X`. 
Jednakże, ta notacja jest niezbyt poręczna, więc Go, pozwala użyć nam następującej notacji
`p.X`, czyli bez uwzględniania jawnej derefencji. 

.play moretypes/struct-pointers.go

* Literały Struktur (tzw. struct literals)

Literał stuktury oznacza przydzielanie wartości po przez wymienianie kolejno pól struktury.

Możesz przypisać wartości pól poprzez użycie `Name:`. ( Porządek pól nie ma znaczenia )

Prefix `&` zwraca wskaźnik do wartości stuktury.

.play moretypes/struct-literals.go


* Tablice (tzw. arrays)

Typ `[n]T` jest tablicą która zawiera wartości `n` typu `T`.

Wyrażenie

	var a [10]int

deklaruje zmienna `a` jako tablice zawierającą dziesięć integerów (liczbowy typ danych). 

Długość tablicy jest częścią jej typu, tak więc rozmiar tablicy nie może być zmieniany. 
To może wydawać się niedogodne, jednak nie martw się;
Go posiada wiele wygodnych sposobów na pracę z tablicami.

.play moretypes/array.go

* Wycinki (tzw. slices)

Tablice mają określony rozmiar.
Wycinki znów, poznawalają na dynamiczną, elastyczną pracę z tablicami.
W praktyce, wycinki są dużo cześciej używane niżeli tablice.

Type `[]T` jest wycinkiem z elementami o typie `T`.

Wycinek jest stworzony poprzez określenie dwóch indeksów, dolnego (low)
oraz górnego (high) ograniczenia, oddzielonego dwukropiem:

	a[low : high]

Wyrażnie powyżej specyfikuje zasięg elemntów który zawiera 
pierwszy element, lecz wyklucza ostatni.

Następujące wyrażenie tworzy wycinek który zawiera elementy od 1 do 3 z `a`:

	a[1:4]

.play moretypes/slices.go


* Wycinki są jak referencje do tablic

Wycinek nie przetrzymuje żadnych danych,
lecz określa sekcje danej tablicy.

Zmienianie wartości wycinka modyfikuje dany element 
z danej tablicy.

Inne wycinki które równierz nawiązuja do tej samej tablicy będa odzwierciedlały dokonane zmiany.

.play moretypes/slices-pointers.go


* Literały wycinków  (tzw. slice literals)

Literał wycinków jest jak literał tablicy bez długości.

Oto literał tablicy:

	[3]bool{true, true, false}

A to tworzy taką samą tablicę jak powyżej,
oraz tworzy wycinek który odnosi się do niej:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Wycinki domyślne (tzw. slice defaults)

Gdy tworzymy wycinki, można pominąć wysokie lub niskie granice by użyć wartości domyślnych.

Wartość domyślna dla dolniej granicy wynosi zero, wartość górna granicy jest równa długości tablicy.

Dla poniżej tablicy:

	var a [10]int

te wartości wycinków są identyczne:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Długości i pojemność wycinków

Wycinek posiada _długość_ (length) oraz _pojemność_ (capacity).

Długość(len) wycinka to liczba elemntów które posiada.

Pojemność(cap) wycinków to liczba elementów tablicy do której dany wycinek nawiązuje,
licząc od pierwszego elementu w wycinku.

Dlugość i pojemność wycinka `s` może zostać uzyskana po przez użycie wyrażenia
`len(s)` oraz `cap(s)`.

Możesz zwiększyć długość wycinka poprzez tworzenie z niego kolejnego wycinka (tzw. re-slicing),
jeśli tylko dany wycinek posiada wymaganą pojemność.
Spróbuj zmienić jeden z wycinków w przykładowym programie, tak by wykroczyć poza jego pojemność
i zobacz co się stanie.

.play moretypes/slice-len-cap.go


* Wycinki zerowe (Nil slices)

Wartość zerowa wycinka to `nil`.

Wycinek `nil` ma długość oraz pojemność równa 0 oraz 
nie posiada żadnej tablicy odnośnej.

.play moretypes/nil-slices.go


* Tworzenie wycinka za pomocą `make`

Wycinki mogą być stworzone poprzez wbudowana funkcję `make`;
tak właśnie tworzy się dynamiczne tablice.

Funkcja `make` przydziela zerową tablice oraz 
zwraca wycinek który odnosi się do tej tablicy:

	a := make([]int, 5)  // len(a)=5

By określić pojemność, wystarczy podać trzeci argument do funkcji `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Wycinki wycinków

Wycinki mogą zawierać każdy typ, tak równierz jak i inne wycinki.

.play moretypes/slices-of-slice.go


* Dołączanie do wycinka

Bardzo często zdarza się że chcemy dodać nowy element do wycinka, Go posiada wbudowaną funkcję `append`.
[[https://golang.org/pkg/builtin/#append][Dokumentacja]] wbudowanej funkcji `append`.

	func append(s []T, vs ...T) []T

Pierwszy parametr `s` funckcji `append` jest wycinek o typie `T`, a reszta parametrów to 
wartości `T` które chcemy dołączyć do wycinka.

Rezultatem funkcji `append` jest wycinek zawierający wszystkie elementy oryginalnego wycinka 
oraz dodatkowe elementy.

Jeśli tablica odpowiadająca wartości `s` jest zbyt mała by pomieścić wszystkie wartości, nowa, większa tablica
zostanie utworzona. Zwrócony wycinek będzie wskazywał nowo przydzieloną tablice.

(By nauczyć się więcej o wycinkach, przeczytaj artykuł [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]])

.play moretypes/append.go


* Zakres (tzw. range)

`range` z pętli(`for`) iteruje poprzez mapę(tzw. map) lub wycinek(tzw. slice).

Gdy przechodzimy przez zakres wycinka, dwie wartości są zwrócone przy każdej iteracji.
Pierwszą jest indeks, a drugą jest kopia elementu o tym właśnie indeksie.

.play moretypes/range.go

* Zakres ciąg dalszy

Możesz pominąć indeks lub wartość zwrotu poprzez `_`.

    for i, _ := range pow
    for _, value := range pow

Jeśli chcesz otrzymać tylko indeks, możesz pominąć wartość: 

    for i := range pow

.play moretypes/range-continued.go

* Ćwiczenie: Wycinki

Zaimplementuj `Pic`. Powinnien on zwrócić wycinek o długości `dy`, każdy element tego wycinka powinien być wycinkiem `dx`  8-bitowych unsigned-integers. Gdy uruchomisz program, wyświetli on obrazek, interpretując wartości integerów w skali szarości.

Wybór obrazka należy do ciebie. Funkcje które mogą cię zainteresowac: `(x+y)/2`, `x*y`, and `x^y`.

(Musisz użyć pętli by przypisać każdą wartość `[]uint8` w wewnątrz `[][]uint8`.)

(Użyj `uint8(intValue)` by zmieniać(konwertować) typy)

.play moretypes/exercise-slices.go

* Mapy (Maps)

Mapa mapuje klucze do wartości.

Wartość zerowa mapy to `nil`.
Mapa `nil` nie posiada kluczy, tak równierz, jak i klucze nie mogą być dodane.

Funkcja `make` zwraca mapę danego typu,
zaincjanowaną i gotową do użytku.

.play moretypes/maps.go

* Literały map (tzw. map literals)

Literały map są podobne do literałów struktór, jednak klucze są wymage.

.play moretypes/map-literals.go

* Literały map ciąg dalszy

Jeśli typ użyty jest tylko nazwą typu, możesz pominać element literału.

.play moretypes/map-literals-continued.go

* Mutowanie map

Wstaw lub zaktualizuj element w mapie `m`:

	m[key] = elem

Odzyskaj element: 

	elem = m[key]

Usuń element:

	delete(m, key)

Sprawdź czy dany klucz znajduje się w mapie poprzez przypisanie rezultatowi dwóch elementów:

	elem, ok = m[key]

Jeśli `key` znajduje się w mapie `m`, `ok` jest wartością `true`. Jeśli nie, `ok` jest równe `false`.

Jeśli `key` nie znajduje się w mapie, wtedy `elem` jest wartością zerową dla typu elementu mapy. 

*Uwaga:* Jeśli `elem` lub `ok` nie zostało zadeklarowane, możesz użyc formy deklaracji krótkiej:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Ćwiczenie: Mapy

Zaimplementuj `WordCount`.  Program powinien zwrócić mapę która policzy każde "słowo" w stringu `s`. Funkcja `wc.Test` puszcza test twojej funkcji i zwraca "success"(sukces) lub "failure"(porażka)

Ten materiał może ci pomóc [[https://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Wartości funkcji

Funkcje są równierz wartościami. Mogą zostać przekazywane tak samo jak inne wartości.

Wartości funkcji mogą być użyte jako argumenty funkcji oraz wartości zwrócone.

.play moretypes/function-values.go

* Domknięcia funkcji (tzw. function closures)

Funkcje w Go mogą być domknięciami. Domknięcie to wartość funkcji która odnosi się do zmiennych które znajdują się poza kodem zawartym w funkcji. Funkcja ma dostęp do wspomnianych zmiennych; w tym sensie funkcja jest "powiązana" z zmiennymi.

Na przykład, funkcja `adder` zwraca domknięcie. Każde domknięcie jest połączone z własną zmienną `sum`.

.play moretypes/function-closures.go

* Ćwiczenie: Domknięcie Fibonacci

Zabawmy się z funkcjami.

Zaimplementuj funkcję `fibonacci` która zwróci funkcję (domknięcie) która zwróci 
[[https://en.wikipedia.org/wiki/Fibonacci_number][liczby fibonacciego]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Gratulujemy!

Ukończyłeś tą lekcję!

Możesz wrócić do listy [[/list][modułów]] by dowiedzieć się czego nauczyć się następnie, lub kontynuować do [[javascript:click('.next-page')][następnej lekcji]].
